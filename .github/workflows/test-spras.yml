name: Test SPRAS

on: [push, pull_request]

jobs:
  # Installs the pixi environment but does not run tests because the tests require Linux Docker images
  pixi-only:
    name: Test pixi environment
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [macos-latest, windows-latest]
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      - name: Install pixi
        uses: prefix-dev/setup-pixi@v0.9.0
        with:
          pixi-version: v0.53.0
          cache: false
          locked: false
      - name: Log pixi environment contents
        run: pixi list

  # Runs the test code and Snakemake workflow in the pixi environment
  test:
    name: Run tests
    # The Docker images will be pulled in both the docker job and this test job
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        # We later use this with `pytest-split` to split our test CI into two
        # (with the max specified by `--splits 2`), to save CI time by parallelization
        test_group: [1, 2]
        os: [ubuntu-latest]
      # we want all tests to run, even if some fail.
      fail-fast: false
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      - name: Install pixi
        uses: prefix-dev/setup-pixi@v0.9.0
        with:
          pixi-version: v0.53.0
          cache: false
          locked: false
      - name: Log pixi environment contents
        run: pixi list
      - name: Install Apptainer
        # Formerly used Singularity instead of Apptainer (see https://github.com/eWaterCycle/setup-singularity/issues/6)
        uses: eWaterCycle/setup-apptainer@v2
        with:
          # Choose version from https://github.com/apptainer/apptainer/releases
          apptainer-version: 1.3.6
      - name: Run tests
        # Verbose output and disable stdout and stderr capturing
        # [this pytest-split workflow was borrowed from Snakemake CI]
        run: pixi run pytest -vs --splits 2 --group ${{ matrix.test_group }}
  workflow:
    name: Run workflow
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest]
    steps:
      # TODO: is it worth it to make this setup into a composite action?
      - name: Checkout repository
        uses: actions/checkout@v4
      - name: Install pixi
        uses: prefix-dev/setup-pixi@v0.9.0
        with:
          pixi-version: v0.53.0
          cache: false
          locked: false
      - name: Log pixi environment contents
        run: pixi list
      - name: Run Snakemake workflow
        # We enable high parallelization (cores 4) to test our way out of the experienced
        # race conditions from #268 and #279
        # We also enforce strict DAG evaluation to catch DAG problems before they appear as user errors. (#359)
        run: pixi run snakemake --cores 4 --configfile config/config.yaml --show-failed-logs --strict-dag-evaluation cyclic-graph --strict-dag-evaluation functions --strict-dag-evaluation periodic-wildcards

  # Run pre-commit checks on source files
  pre-commit:
    name: Run pre-commit checks
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
      - name: Install pixi
        uses: prefix-dev/setup-pixi@v0.9.0
        with:
          pixi-version: v0.53.0
          cache: false
          locked: false
      - name: Run pre-commit
        # https://github.com/pre-commit/action/blob/576ff52938d158a24ac7e009dfa94b1455e7df99/action.yml#L19
        run: pixi run pre-commit run --all-files --show-diff-on-failure --color=always
