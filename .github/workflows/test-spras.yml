name: Test SPRAS

on: [push, pull_request]

jobs:
  # Installs the conda environment but does not run tests because the tests require Linux Docker images
  conda-only:
    name: Test conda environment
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [macos-latest, windows-latest]
    steps:
      - name: Checkout repository
        uses: actions/checkout@v2
      - name: Install conda environment
        uses: conda-incubator/setup-miniconda@v2
        with:
          activate-environment: spras
          environment-file: environment.yml
          auto-activate-base: false
          miniconda-version: 'latest'
      # Log conda environment contents
      - name: Log conda environment
        shell: bash --login {0}
        run: conda list

  # Runs the test code and Snakemake workflow in the conda environment
  test:
    name: Run tests
    # The Docker images will be pulled in both the docker job and this test job
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        test_group: [1, 2]
        os: [ubuntu-latest]
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      - name: Install conda environment
        uses: conda-incubator/setup-miniconda@v2
        with:
          activate-environment: spras
          environment-file: environment.yml
          auto-activate-base: false
          miniconda-version: 'latest'
      # Install spras in the environment using pip
      - name: Install spras in conda env
        shell: bash --login {0}
        run: pip install .
      # Log conda environment contents
      - name: Log conda environment
        shell: bash --login {0}
        run: conda list
      # Formerly used Singularity instead of Apptainer (see https://github.com/eWaterCycle/setup-singularity/issues/6)
      - name: Install Apptainer
        uses: eWaterCycle/setup-apptainer@v2
        with:
          # Choose version from https://github.com/apptainer/apptainer/releases
          apptainer-version: 1.3.6
      - name: Run tests
        shell: bash --login {0}
        # Verbose output and disable stdout and stderr capturing
        # [this pytest-split workflow was borrowed from Snakemake CI]
        run: pytest -vs --splits --group ${{ matrix.test_group }}
  workflow:
    name: Run workflow
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest]
    steps:
      # TODO: is it worth it to make this setup into a composite action?
      - name: Checkout repository
        uses: actions/checkout@v4
      - name: Install conda environment
        uses: conda-incubator/setup-miniconda@v2
        with:
          activate-environment: spras
          environment-file: environment.yml
          auto-activate-base: false
          miniconda-version: 'latest'
      # Install spras in the environment using pip
      - name: Install spras in conda env
        shell: bash --login {0}
        run: pip install .
      - name: Run Snakemake workflow
        shell: bash --login {0}
        # We enable high parallelization to test our way out of the experienced
        # race conditions from #268 and #279
        run: snakemake --cores 4 --configfile config/config.yaml --show-failed-logs

  # Run pre-commit checks on source files
  pre-commit:
    name: Run pre-commit checks
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11' # Match this to the version specified in environment.yml
      - name: Run pre-commit checks
        uses: pre-commit/action@v3.0.0
