<!DOCTYPE html>
<html lang="en">

<head>
  <link rel="stylesheet" href="https://stackpath.bootstrapcdn.com/bootstrap/4.1.3/css/bootstrap.min.css">
<link rel="stylesheet" href="https://maxcdn.bootstrapcdn.com/bootstrap/3.3.7/css/bootstrap.min.css" integrity="sha384-BVYiiSIFeK1dGmJRAkycuHAHRg32OmUcww7on3RYdg4Va+PmSTsz/K68vbdEjh4u" crossorigin="anonymous">
  <meta charset="utf-8">
  <link rel="shortcut icon" href="%PUBLIC_URL%/favicon.ico">
  <meta name="viewport" content="width=device-width, initial-scale=1, shrink-to-fit=no">
  <meta name="theme-color" content="#000000">
  <!--
      manifest.json provides metadata used when your web app is added to the
      homescreen on Android. See https://developers.google.com/web/fundamentals/web-app-manifest/
    -->
  <link rel="manifest" href="%PUBLIC_URL%/manifest.json">
  <!--
      Notice the use of %PUBLIC_URL% in the tags above.
      It will be replaced with the URL of the `public` folder during the build.
      Only files inside the `public` folder can be referenced from the HTML.

      Unlike "/favicon.ico" or "favicon.ico", "%PUBLIC_URL%/favicon.ico" will
      work correctly both with client-side routing and a non-root public URL.
      Learn how to configure a non-root public URL by running `npm run build`.
    -->
  <title>React App</title>


  <!-- JQuery -->
  <script src="https://code.jquery.com/jquery-3.3.1.min.js" integrity="sha256-FgpCb/KJQlLNfOu91ta32o/NMZxltwRo8QtmkMRdAu8="
    crossorigin="anonymous"></script>

  <!-- cytoscape.js -->
  <script src="https://cdnjs.cloudflare.com/ajax/libs/cytoscape/3.2.17/cytoscape.js"></script>
  <script src="https://cdn.jsdelivr.net/npm/cytoscape-euler@1.2.1/cytoscape-euler.min.js"></script>

<script>
let generateTable = () => {
	let ctable = [];
  if (ctable.length==0) return;
  let properties= ["GO id", "GO name", "pval", "qval"]//Object.getOwnPropertyNames(ctable[0])
  let table = "<table class='table'> <thead>"
  table += "<tr>"
  for (let j = 0; j < properties.length; j++) {
  table += "<th scope='col'>" + properties[j] + "</th>"
}
  table += "</tr> </thead> <tbody>"
  for (let i = 1; i < ctable.length; i++) {
  table += "<tr>"
  for (let j = 0; j < properties.length; j++) {
    table += "<td>" + ctable[i][properties[j]] + "</td>"
  }
  table += "</tr>"
}
  table += "</tbody></table>"
  document.getElementById("hg_report").innerHTML = table;
  document.getElementById("hg_total_number").innerHTML = "<h3>Total number of enriched groups: " + (ctable.slice(1).filter(cur => cur[5] <= 0.05).length) + "</h3>";
}
  </script>

 <script>
 let generateEnrichedModulesReport = () => {
 let content = [];
 if (content.length==0) return;
 let table = "<table class='table'> <thead>"
 table += "<tr>"
      for (let j = 0; j < content[0].length; j++) {
        table += "<th scope='col'>" + content[0][j].split("_").join(" ").replace(/\b\w/g, l => l.toUpperCase()) + "</th>"
      }
      table += "</tr> </thead> <tbody>"
      for (let i = 1; i < content.length; i++) {
        table += "<tr>"
        for (let j = 0; j < content[0].length; j++) {
	  let cellContent = content[i][j];
          if (j==content[0].indexOf("more_details")){
	  	cellContent = "<a href='"+content[i][j]+"'>More...</a>"
          }
          table += "<td><h4>" + cellContent + "</h4></td>"
        }
        table += "</tr>"
      }
      table += "</tbody></table>"
      if (content.length > 0) {
        document.getElementById("num_of_enriched_terms_title").innerHTML = "<h3>Total number of enriched terms per module: </h3>";
        document.getElementById("num_of_enriched_terms").innerHTML = table;
      }

    }
  </script>

 <script>
 let generateDiseaseReport = () => {
 let content = [];
 if (content.length==0) return;
 let table = "<table class='table'> <thead>"
 table += "<tr>"
      for (let j = 0; j < content[0].length; j++) {
        table += "<th scope='col'>" + content[0][j] + "</th>"
      }
      table += "</tr> </thead> <tbody>"
      for (let i = 1; i < content.length; i++) {
        table += "<tr>"
        for (let j = 0; j < content[0].length; j++) {
	  let cellContent = content[i][j];
          if (j==content[0].indexOf("More Details")){
	  	cellContent = "<a href='"+content[i][j]+"'>More...</a>"
          }
          table += "<td><h4>" + cellContent + "</h4></td>"
        }
        table += "</tr>"
      }
      table += "</tbody></table>"
      if (content.length > 0) {
        document.getElementById("disease_title").innerHTML = "<h3>Disease Statistics: </h3>";
        document.getElementById("disease_content").innerHTML = table;
      }

    }
  let showActiveGenes = () => {
  window.cy.nodes().map(cur => cur.data("label", cur.data("gene_symbol")))
}
  </script>

      <script>

      function rainbow(max, h, s, l) {
    if (Array.isArray(h)) {
      if (h.length > 1) {
        return [10, 10, 10];
      }
      h = h[0];
    }

    h = h / max;

    var r, g, b;

    if (s == 0) {
      r = g = b = l; // achromatic
    } else {
      var hue2rgb = function hue2rgb(p, q, t) {
        if (t < 0) t += 1;
        if (t > 1) t -= 1;
        if (t < 1 / 6) return p + (q - p) * 6 * t;
        if (t < 1 / 2) return q;
        if (t < 2 / 3) return p + (q - p) * (2 / 3 - t) * 6;
        return p;
      };

      var q = l < 0.5 ? l * (1 + s) : l + s - l * s;
      var p = 2 * l - q;
      r = hue2rgb(p, q, h + 1 / 3);
      g = hue2rgb(p, q, h);
      b = hue2rgb(p, q, h - 1 / 3);
    }

    return [Math.round(r * 255), Math.round(g * 255), Math.round(b * 255)];
  }

         function bwr(max, h, s, l) {
        if (Array.isArray(h)) {
          if (h.length > 1) {
            return [10, 10, 10];
          }
          h = h[0];
        }
        if (h == undefined) {
          return [10, 10, 10];
        }

        h = h / max;
        console.log(h + " " + max);

        var r, g, b;

        if (s == 0) {
          r = g = b = l; // achromatic
        } else {
          if (h > 0.5) {
            r = 1;
            g = 1 - Math.abs(h - 0.5) / 0.5;
            b = 1 - Math.abs(h - 0.5) / 0.5;
          } else {
            r = h / 0.5;
            g = h / 0.5;
            b = 1;
          }
        }

        return [Math.round(r * 255), Math.round(g * 255), Math.round(b * 255)];
      }

      function load_network(elements) {
        let div_id = "cytoscapeweb";
        let cy = cytoscape({
          container: document.getElementById(div_id),
          elements: elements,
          style: [
            // the stylesheet for the graph
            {
              selector: "node",
              style: {
                label: "data(label)",
                "background-color": function(x) {
                  return x.data().node_color != undefined
                    ? x.data().node_color
                    : "#666";
                },
                "border-color": function(x) {
                  return x.data().line_color != undefined
                    ? x.data().line_color
                    : "#666";
                },
                "border-width": "7px"
              }
            },
            {
              selector: "edge",
              style: {
                // 'z-compound-depth': function (ele) { return ele.data()['label'] == undefined ? 'bottom' : 'top'; },

                "z-index": function(ele) {
                  console.log(
                    ele.data()["label"] == undefined ? "bottom" : "top"
                  );
                  return ele.data()["label"] == undefined ? 0 : 1;
                }
              }
            }
          ],
          layout: {
            name: "euler",
            randomize: true,
            animate: false,
            springCoeff: edge => 0.00008,
            fit: true
          }
        });
        cy.on("select", function(event) {
          if (event.target.isEdge()) return;
          print(
            event.target.data().eid,
            !!event.target.data().gene_symbol
              ? event.target.data().gene_symbol
              : "",
            !!event.target.data().modules ? event.target.data().modules : ""
          );
          event.target.data(
            "label",
            !!event.target.data().gene_symbol
              ? event.target.data().gene_symbol
              : event.target.data().eid
          );
          console.log(event);
        });

        cy.on("unselect", function(event) {
          if (event.target.isEdge()) return;
          clear();
          event.target.data("label", "");
          selectedIds = event.cy
            .$(":selected")
            .jsons()
            .map(cur => cur.data);
          for (var i = 0; i < selectedIds.length; i++) {
            print(
              selectedIds[i].eid,
              selectedIds[i].gene_symbol,
              selectedIds[i].modules
            );
          }

          console.log(event);
        });

        clear();
        selectedIds = cy
          .$(":selected")
          .jsons()
          .filter(cur => !!!cur.data["source"]);
        for (var i = 0; i < selectedIds.length; i++) {
          print(
            selectedIds[i].data.eid,
            !!selectedIds[i].data.gene_symbol
              ? selectedIds[i].data.gene_symbol
              : "",
            !!selectedIds[i].data.modules ? selectedIds[i].data.modules : ""
          );
        }

        return cy;
      }
      function clear() {
        document.getElementById("note").innerHTML = "";
      }

      function print(id, name, modules) {
        document.getElementById("note").innerHTML +=
          "<tr><td>" +
          id +
          "</td><td>" +
          name +
          "</td><td>" +
          modules.join(", ") +
          "</td></tr>";
      }

      window.onload = () => {
      let data = [{"data": {"id": "ENSG0ENSG00000122691", "eid": "ENSG0ENSG00000122691", "modules": [0], "gene_symbol": "TWIST1", "score": 0.0}, "label": "ENSG0ENSG00000122691", "selected": true}, {"data": {"id": "ENSG0ENSG00000138757", "eid": "ENSG0ENSG00000138757", "modules": [0], "gene_symbol": "G3BP2", "score": 0.0}, "label": "ENSG0ENSG00000138757", "selected": true}, {"data": {"id": "ENSG0ENSG00000134954", "eid": "ENSG0ENSG00000134954", "modules": [0], "gene_symbol": "ETS1", "score": 0.0}, "label": "ENSG0ENSG00000134954", "selected": true}, {"data": {"id": "ENSG0ENSG00000077150", "eid": "ENSG0ENSG00000077150", "modules": [0], "gene_symbol": "NFKB2", "score": 0.0}, "label": "ENSG0ENSG00000077150", "selected": true}, {"data": {"id": "ENSG0ENSG00000173120", "eid": "ENSG0ENSG00000173120", "modules": [0], "gene_symbol": "KDM2A", "score": 0.0}, "label": "ENSG0ENSG00000173120", "selected": true}, {"data": {"id": "ENSG0ENSG00000173039", "eid": "ENSG0ENSG00000173039", "modules": [0], "gene_symbol": "RELA", "score": 0.0}, "label": "ENSG0ENSG00000173039", "selected": true}, {"data": {"id": "ENSG0ENSG00000168884", "eid": "ENSG0ENSG00000168884", "modules": [0], "gene_symbol": "TNIP2", "score": 0.0}, "label": "ENSG0ENSG00000168884", "selected": true}, {"data": {"id": "ENSG0ENSG00000109320", "eid": "ENSG0ENSG00000109320", "modules": [0], "gene_symbol": "NFKB1", "score": 0.0}, "label": "ENSG0ENSG00000109320", "selected": true}, {"data": {"id": "ENSG0ENSG00000100906", "eid": "ENSG0ENSG00000100906", "modules": [0], "gene_symbol": "NFKBIA", "score": 0.0}, "label": "ENSG0ENSG00000100906", "selected": true}, {"data": {"id": "ENSG0ENSG00000166135", "eid": "ENSG0ENSG00000166135", "modules": [0], "gene_symbol": "HIF1AN", "score": 0.0}, "label": "ENSG0ENSG00000166135", "selected": true}, {"data": {"id": "ENSG0ENSG00000198873", "eid": "ENSG0ENSG00000198873", "modules": [0], "gene_symbol": "GRK5", "score": 0.0}, "label": "ENSG0ENSG00000198873", "selected": true}, {"data": {"id": "ENSG0ENSG00000107968", "eid": "ENSG0ENSG00000107968", "modules": [0], "gene_symbol": "MAP3K8", "score": 0.0}, "label": "ENSG0ENSG00000107968", "selected": true}, {"data": {"id": "ENSG0ENSG00000282905", "eid": "ENSG0ENSG00000282905", "modules": [0], "gene_symbol": "ENSG0ENSG00000282905", "score": 0.0}, "label": "ENSG0ENSG00000282905", "selected": true}, {"data": {"id": "ENSG0ENSG00000173020", "eid": "ENSG0ENSG00000173020", "modules": [0], "gene_symbol": "ADRBK1", "score": 0.0}, "label": "ENSG0ENSG00000173020", "selected": true}, {"data": {"id": "ENSG0ENSG00000162924", "eid": "ENSG0ENSG00000162924", "modules": [0], "gene_symbol": "REL", "score": 0.0}, "label": "ENSG0ENSG00000162924", "selected": true}, {"data": {"id": "ENSG0ENSG00000170606", "eid": "ENSG0ENSG00000170606", "modules": [0], "gene_symbol": "HSPA4", "score": 0.0}, "label": "ENSG0ENSG00000170606", "selected": true}, {"data": {"id": "ENSG0ENSG00000157557", "eid": "ENSG0ENSG00000157557", "modules": [0], "gene_symbol": "ETS2", "score": 0.0}, "label": "ENSG0ENSG00000157557", "selected": true}, {"data": {"id": "ENSG0ENSG00000104856", "eid": "ENSG0ENSG00000104856", "modules": [0], "gene_symbol": "RELB", "score": 0.0}, "label": "ENSG0ENSG00000104856", "selected": true}, {"data": {"id": "ENSG0ENSG00000146232", "eid": "ENSG0ENSG00000146232", "modules": [0], "gene_symbol": "NFKBIE", "score": 0.0}, "label": "ENSG0ENSG00000146232", "selected": true}, {"data": {"id": "ENSG0ENSG00000122691_ENSG0ENSG00000138757", "source": "ENSG0ENSG00000122691", "target": "ENSG0ENSG00000138757"}, "label": "-"}, {"data": {"id": "ENSG0ENSG00000122691_ENSG0ENSG00000109320", "source": "ENSG0ENSG00000122691", "target": "ENSG0ENSG00000109320"}, "label": "-"}, {"data": {"id": "ENSG0ENSG00000134954_ENSG0ENSG00000077150", "source": "ENSG0ENSG00000134954", "target": "ENSG0ENSG00000077150"}, "label": "-"}, {"data": {"id": "ENSG0ENSG00000077150_ENSG0ENSG00000107968", "source": "ENSG0ENSG00000077150", "target": "ENSG0ENSG00000107968"}, "label": "-"}, {"data": {"id": "ENSG0ENSG00000077150_ENSG0ENSG00000157557", "source": "ENSG0ENSG00000077150", "target": "ENSG0ENSG00000157557"}, "label": "-"}, {"data": {"id": "ENSG0ENSG00000077150_ENSG0ENSG00000109320", "source": "ENSG0ENSG00000077150", "target": "ENSG0ENSG00000109320"}, "label": "-"}, {"data": {"id": "ENSG0ENSG00000173120_ENSG0ENSG00000173039", "source": "ENSG0ENSG00000173120", "target": "ENSG0ENSG00000173039"}, "label": "-"}, {"data": {"id": "ENSG0ENSG00000173039_ENSG0ENSG00000109320", "source": "ENSG0ENSG00000173039", "target": "ENSG0ENSG00000109320"}, "label": "-"}, {"data": {"id": "ENSG0ENSG00000168884_ENSG0ENSG00000109320", "source": "ENSG0ENSG00000168884", "target": "ENSG0ENSG00000109320"}, "label": "-"}, {"data": {"id": "ENSG0ENSG00000109320_ENSG0ENSG00000282905", "source": "ENSG0ENSG00000109320", "target": "ENSG0ENSG00000282905"}, "label": "-"}, {"data": {"id": "ENSG0ENSG00000109320_ENSG0ENSG00000104856", "source": "ENSG0ENSG00000109320", "target": "ENSG0ENSG00000104856"}, "label": "-"}, {"data": {"id": "ENSG0ENSG00000109320_ENSG0ENSG00000146232", "source": "ENSG0ENSG00000109320", "target": "ENSG0ENSG00000146232"}, "label": "-"}, {"data": {"id": "ENSG0ENSG00000109320_ENSG0ENSG00000166135", "source": "ENSG0ENSG00000109320", "target": "ENSG0ENSG00000166135"}, "label": "-"}, {"data": {"id": "ENSG0ENSG00000109320_ENSG0ENSG00000170606", "source": "ENSG0ENSG00000109320", "target": "ENSG0ENSG00000170606"}, "label": "-"}, {"data": {"id": "ENSG0ENSG00000100906_ENSG0ENSG00000166135", "source": "ENSG0ENSG00000100906", "target": "ENSG0ENSG00000166135"}, "label": "-"}, {"data": {"id": "ENSG0ENSG00000100906_ENSG0ENSG00000198873", "source": "ENSG0ENSG00000100906", "target": "ENSG0ENSG00000198873"}, "label": "-"}, {"data": {"id": "ENSG0ENSG00000100906_ENSG0ENSG00000173020", "source": "ENSG0ENSG00000100906", "target": "ENSG0ENSG00000173020"}, "label": "-"}, {"data": {"id": "ENSG0ENSG00000162924_ENSG0ENSG00000170606", "source": "ENSG0ENSG00000162924", "target": "ENSG0ENSG00000170606"}, "label": "-"}];
      let max_score =
          Math.max(
            ...data.map(cur => {
              return cur["data"]["score"];
            }).filter(cur => !!cur)
          ) + 1;
        let max_module =
          Math.max(
            ...data.map(cur => {
                return !!cur["data"]["modules"] ? cur["data"]["modules"] : [];
              })
              .reduce((a, c) => a.concat(c), [])
          ) + 1;
      data = data.map(cur => {cur["label"] = !!cur["data"]["gene_symbol"] ? cur["data"]["gene_symbol"] : cur["data"]["eid"];
              cur["data"]["node_color"] = bwr(
                max_score,
                cur["data"]["score"],
                1,
                1
              );
              cur["data"]["line_color"] = rainbow(
                max_module,
                cur["data"]["modules"],
                0.75,
                0.75
              );
              return cur;})
      let cy1 = load_network(data)
      window.cy=cy1;
      generateTable()
      generateEnrichedModulesReport()
      generateDiseaseReport()
    };

  </script>




  <style>
    /* The Cytoscape Web container must have its dimensions set. */
    html,
    body {
      position: relative;
      height: 100% !important;
      width: 100% !important;
      padding: 0;
      margin: 0;
    }

    #cy1, #cy2 {
      width: 100% !important;
      height: 100% !important;
    }

    .image-wrapper {
      position: absolute;
      transform: translate(-50%, -50%);
      opacity: 1;
    }

    .image-wrapper.fade-out {
      opacity: 0;
      transition: opacity 1s ease-in-out;
    }
  </style>

</head>

<body>
  <noscript>
    You need to enable JavaScript to run this app.
  </noscript>
  <div class='container m-3' >
    <div class='row' style="width: 100vw">
      <div class='col-md-3'>
        <div class="row">
          <div id="root"></div>
        </div>
        <div class="row m-2">
          <table class="table">
                <thead>
                  <tr>
                    <th scope="col">id</th>
                    <th scope="col">name</th>
                    <th scope="col">modules</th>
                  </tr>
                </thead>
                <tbody div id="note"></tbody>
              </table>
	<button onclick="showActiveGenes()" class="btn btn-info"> show labels on genes</button>
        </div>
      </div>
      <div class='col-md-9'>
           <div id="cytoscapeweb" style="height: 70vh;width: 90vw">
        </div>
      </div>
    </div>
    <div class='row' style="height: 100vh;width: 100vw">
	<div class='col-md-12'>
		 <div><h3>Total number of genes: 19</h3></div>
                 <div id="disease_title"></div>
		 <div class='row'>
			<div class='col-md-3'>
                 		<div id="disease_content"></div>
                 	</div>
		 </div>
		 <div id="num_of_enriched_terms_title"></div>
		 <div class='row'>
			<div class='col-md-3'>
                 		<div id="num_of_enriched_terms"></div>
                 	</div>
		 </div>
		 <div id="hg_total_number"></div>
		 <div id="hg_report"></div>
	</div>
    </div>
  </div>

  <!--
      This HTML file is a template.
      If you open it directly in the browser, you will see an empty page.

      You can add webfonts, meta tags, or analytics to this file.
      The build step will place the bundled scripts into the <body> tag.

      To begin the development, run `npm start` or `yarn start`.
      To create a production bundle, use `npm run build` or `yarn build`.
    -->
</body>

</html>
<!DOCTYPE html>
<html lang="en">

<head>
  <link rel="stylesheet" href="https://stackpath.bootstrapcdn.com/bootstrap/4.1.3/css/bootstrap.min.css">
<link rel="stylesheet" href="https://maxcdn.bootstrapcdn.com/bootstrap/3.3.7/css/bootstrap.min.css" integrity="sha384-BVYiiSIFeK1dGmJRAkycuHAHRg32OmUcww7on3RYdg4Va+PmSTsz/K68vbdEjh4u" crossorigin="anonymous">
  <meta charset="utf-8">
  <link rel="shortcut icon" href="%PUBLIC_URL%/favicon.ico">
  <meta name="viewport" content="width=device-width, initial-scale=1, shrink-to-fit=no">
  <meta name="theme-color" content="#000000">
  <!--
      manifest.json provides metadata used when your web app is added to the
      homescreen on Android. See https://developers.google.com/web/fundamentals/web-app-manifest/
    -->
  <link rel="manifest" href="%PUBLIC_URL%/manifest.json">
  <!--
      Notice the use of %PUBLIC_URL% in the tags above.
      It will be replaced with the URL of the `public` folder during the build.
      Only files inside the `public` folder can be referenced from the HTML.

      Unlike "/favicon.ico" or "favicon.ico", "%PUBLIC_URL%/favicon.ico" will
      work correctly both with client-side routing and a non-root public URL.
      Learn how to configure a non-root public URL by running `npm run build`.
    -->
  <title>React App</title>


  <!-- JQuery -->
  <script src="https://code.jquery.com/jquery-3.3.1.min.js" integrity="sha256-FgpCb/KJQlLNfOu91ta32o/NMZxltwRo8QtmkMRdAu8="
    crossorigin="anonymous"></script>

  <!-- cytoscape.js -->
  <script src="https://cdnjs.cloudflare.com/ajax/libs/cytoscape/3.2.17/cytoscape.js"></script>
  <script src="https://cdn.jsdelivr.net/npm/cytoscape-euler@1.2.1/cytoscape-euler.min.js"></script>

<script>
let generateTable = () => {
	let ctable = [];
  if (ctable.length==0) return;
  let properties= ["GO id", "GO name", "pval", "qval"]//Object.getOwnPropertyNames(ctable[0])
  let table = "<table class='table'> <thead>"
  table += "<tr>"
  for (let j = 0; j < properties.length; j++) {
  table += "<th scope='col'>" + properties[j] + "</th>"
}
  table += "</tr> </thead> <tbody>"
  for (let i = 1; i < ctable.length; i++) {
  table += "<tr>"
  for (let j = 0; j < properties.length; j++) {
    table += "<td>" + ctable[i][properties[j]] + "</td>"
  }
  table += "</tr>"
}
  table += "</tbody></table>"
  document.getElementById("hg_report").innerHTML = table;
  document.getElementById("hg_total_number").innerHTML = "<h3>Total number of enriched groups: " + (ctable.slice(1).filter(cur => cur[5] <= 0.05).length) + "</h3>";
}
  </script>

 <script>
 let generateEnrichedModulesReport = () => {
 let content = [];
 if (content.length==0) return;
 let table = "<table class='table'> <thead>"
 table += "<tr>"
      for (let j = 0; j < content[0].length; j++) {
        table += "<th scope='col'>" + content[0][j].split("_").join(" ").replace(/\b\w/g, l => l.toUpperCase()) + "</th>"
      }
      table += "</tr> </thead> <tbody>"
      for (let i = 1; i < content.length; i++) {
        table += "<tr>"
        for (let j = 0; j < content[0].length; j++) {
	  let cellContent = content[i][j];
          if (j==content[0].indexOf("more_details")){
	  	cellContent = "<a href='"+content[i][j]+"'>More...</a>"
          }
          table += "<td><h4>" + cellContent + "</h4></td>"
        }
        table += "</tr>"
      }
      table += "</tbody></table>"
      if (content.length > 0) {
        document.getElementById("num_of_enriched_terms_title").innerHTML = "<h3>Total number of enriched terms per module: </h3>";
        document.getElementById("num_of_enriched_terms").innerHTML = table;
      }

    }
  </script>

 <script>
 let generateDiseaseReport = () => {
 let content = [];
 if (content.length==0) return;
 let table = "<table class='table'> <thead>"
 table += "<tr>"
      for (let j = 0; j < content[0].length; j++) {
        table += "<th scope='col'>" + content[0][j] + "</th>"
      }
      table += "</tr> </thead> <tbody>"
      for (let i = 1; i < content.length; i++) {
        table += "<tr>"
        for (let j = 0; j < content[0].length; j++) {
	  let cellContent = content[i][j];
          if (j==content[0].indexOf("More Details")){
	  	cellContent = "<a href='"+content[i][j]+"'>More...</a>"
          }
          table += "<td><h4>" + cellContent + "</h4></td>"
        }
        table += "</tr>"
      }
      table += "</tbody></table>"
      if (content.length > 0) {
        document.getElementById("disease_title").innerHTML = "<h3>Disease Statistics: </h3>";
        document.getElementById("disease_content").innerHTML = table;
      }

    }
  let showActiveGenes = () => {
  window.cy.nodes().map(cur => cur.data("label", cur.data("gene_symbol")))
}
  </script>

      <script>

      function rainbow(max, h, s, l) {
    if (Array.isArray(h)) {
      if (h.length > 1) {
        return [10, 10, 10];
      }
      h = h[0];
    }

    h = h / max;

    var r, g, b;

    if (s == 0) {
      r = g = b = l; // achromatic
    } else {
      var hue2rgb = function hue2rgb(p, q, t) {
        if (t < 0) t += 1;
        if (t > 1) t -= 1;
        if (t < 1 / 6) return p + (q - p) * 6 * t;
        if (t < 1 / 2) return q;
        if (t < 2 / 3) return p + (q - p) * (2 / 3 - t) * 6;
        return p;
      };

      var q = l < 0.5 ? l * (1 + s) : l + s - l * s;
      var p = 2 * l - q;
      r = hue2rgb(p, q, h + 1 / 3);
      g = hue2rgb(p, q, h);
      b = hue2rgb(p, q, h - 1 / 3);
    }

    return [Math.round(r * 255), Math.round(g * 255), Math.round(b * 255)];
  }

         function bwr(max, h, s, l) {
        if (Array.isArray(h)) {
          if (h.length > 1) {
            return [10, 10, 10];
          }
          h = h[0];
        }
        if (h == undefined) {
          return [10, 10, 10];
        }

        h = h / max;
        console.log(h + " " + max);

        var r, g, b;

        if (s == 0) {
          r = g = b = l; // achromatic
        } else {
          if (h > 0.5) {
            r = 1;
            g = 1 - Math.abs(h - 0.5) / 0.5;
            b = 1 - Math.abs(h - 0.5) / 0.5;
          } else {
            r = h / 0.5;
            g = h / 0.5;
            b = 1;
          }
        }

        return [Math.round(r * 255), Math.round(g * 255), Math.round(b * 255)];
      }

      function load_network(elements) {
        let div_id = "cytoscapeweb";
        let cy = cytoscape({
          container: document.getElementById(div_id),
          elements: elements,
          style: [
            // the stylesheet for the graph
            {
              selector: "node",
              style: {
                label: "data(label)",
                "background-color": function(x) {
                  return x.data().node_color != undefined
                    ? x.data().node_color
                    : "#666";
                },
                "border-color": function(x) {
                  return x.data().line_color != undefined
                    ? x.data().line_color
                    : "#666";
                },
                "border-width": "7px"
              }
            },
            {
              selector: "edge",
              style: {
                // 'z-compound-depth': function (ele) { return ele.data()['label'] == undefined ? 'bottom' : 'top'; },

                "z-index": function(ele) {
                  console.log(
                    ele.data()["label"] == undefined ? "bottom" : "top"
                  );
                  return ele.data()["label"] == undefined ? 0 : 1;
                }
              }
            }
          ],
          layout: {
            name: "euler",
            randomize: true,
            animate: false,
            springCoeff: edge => 0.00008,
            fit: true
          }
        });
        cy.on("select", function(event) {
          if (event.target.isEdge()) return;
          print(
            event.target.data().eid,
            !!event.target.data().gene_symbol
              ? event.target.data().gene_symbol
              : "",
            !!event.target.data().modules ? event.target.data().modules : ""
          );
          event.target.data(
            "label",
            !!event.target.data().gene_symbol
              ? event.target.data().gene_symbol
              : event.target.data().eid
          );
          console.log(event);
        });

        cy.on("unselect", function(event) {
          if (event.target.isEdge()) return;
          clear();
          event.target.data("label", "");
          selectedIds = event.cy
            .$(":selected")
            .jsons()
            .map(cur => cur.data);
          for (var i = 0; i < selectedIds.length; i++) {
            print(
              selectedIds[i].eid,
              selectedIds[i].gene_symbol,
              selectedIds[i].modules
            );
          }

          console.log(event);
        });

        clear();
        selectedIds = cy
          .$(":selected")
          .jsons()
          .filter(cur => !!!cur.data["source"]);
        for (var i = 0; i < selectedIds.length; i++) {
          print(
            selectedIds[i].data.eid,
            !!selectedIds[i].data.gene_symbol
              ? selectedIds[i].data.gene_symbol
              : "",
            !!selectedIds[i].data.modules ? selectedIds[i].data.modules : ""
          );
        }

        return cy;
      }
      function clear() {
        document.getElementById("note").innerHTML = "";
      }

      function print(id, name, modules) {
        document.getElementById("note").innerHTML +=
          "<tr><td>" +
          id +
          "</td><td>" +
          name +
          "</td><td>" +
          modules.join(", ") +
          "</td></tr>";
      }

      window.onload = () => {
      let data = [{"data": {"id": "ENSG0ENSG00000187079", "eid": "ENSG0ENSG00000187079", "modules": [0], "gene_symbol": "TEAD1", "score": 0.0}, "label": "ENSG0ENSG00000187079", "selected": true}, {"data": {"id": "ENSG0ENSG00000177606", "eid": "ENSG0ENSG00000177606", "modules": [0], "gene_symbol": "JUN", "score": 0.0}, "label": "ENSG0ENSG00000177606", "selected": true}, {"data": {"id": "ENSG0ENSG00000171223", "eid": "ENSG0ENSG00000171223", "modules": [0], "gene_symbol": "JUNB", "score": 0.0}, "label": "ENSG0ENSG00000171223", "selected": true}, {"data": {"id": "ENSG0ENSG00000100721", "eid": "ENSG0ENSG00000100721", "modules": [0], "gene_symbol": "TCL1A", "score": 0.0}, "label": "ENSG0ENSG00000100721", "selected": true}, {"data": {"id": "ENSG0ENSG00000168062", "eid": "ENSG0ENSG00000168062", "modules": [0], "gene_symbol": "BATF2", "score": 0.0}, "label": "ENSG0ENSG00000168062", "selected": true}, {"data": {"id": "ENSG0ENSG00000130522", "eid": "ENSG0ENSG00000130522", "modules": [0], "gene_symbol": "JUND", "score": 0.0}, "label": "ENSG0ENSG00000130522", "selected": true}, {"data": {"id": "ENSG0ENSG00000175592", "eid": "ENSG0ENSG00000175592", "modules": [0], "gene_symbol": "FOSL1", "score": 0.0}, "label": "ENSG0ENSG00000175592", "selected": true}, {"data": {"id": "ENSG0ENSG00000182979", "eid": "ENSG0ENSG00000182979", "modules": [0], "gene_symbol": "MTA1", "score": 0.0}, "label": "ENSG0ENSG00000182979", "selected": true}, {"data": {"id": "ENSG0ENSG00000075426", "eid": "ENSG0ENSG00000075426", "modules": [0], "gene_symbol": "FOSL2", "score": 0.0}, "label": "ENSG0ENSG00000075426", "selected": true}, {"data": {"id": "ENSG0ENSG00000128272", "eid": "ENSG0ENSG00000128272", "modules": [0], "gene_symbol": "ATF4", "score": 0.0}, "label": "ENSG0ENSG00000128272", "selected": true}, {"data": {"id": "ENSG0ENSG00000162772", "eid": "ENSG0ENSG00000162772", "modules": [0], "gene_symbol": "ATF3", "score": 0.0}, "label": "ENSG0ENSG00000162772", "selected": true}, {"data": {"id": "ENSG0ENSG00000050748", "eid": "ENSG0ENSG00000050748", "modules": [0], "gene_symbol": "MAPK9", "score": 0.0}, "label": "ENSG0ENSG00000050748", "selected": true}, {"data": {"id": "ENSG0ENSG00000109339", "eid": "ENSG0ENSG00000109339", "modules": [0], "gene_symbol": "MAPK10", "score": 0.0}, "label": "ENSG0ENSG00000109339", "selected": true}, {"data": {"id": "ENSG0ENSG00000170345", "eid": "ENSG0ENSG00000170345", "modules": [0], "gene_symbol": "FOS", "score": 0.0}, "label": "ENSG0ENSG00000170345", "selected": true}, {"data": {"id": "ENSG0ENSG00000085276", "eid": "ENSG0ENSG00000085276", "modules": [0], "gene_symbol": "MECOM", "score": 0.0}, "label": "ENSG0ENSG00000085276", "selected": true}, {"data": {"id": "ENSG0ENSG00000187079_ENSG0ENSG00000177606", "source": "ENSG0ENSG00000187079", "target": "ENSG0ENSG00000177606"}, "label": "-"}, {"data": {"id": "ENSG0ENSG00000177606_ENSG0ENSG00000168062", "source": "ENSG0ENSG00000177606", "target": "ENSG0ENSG00000168062"}, "label": "-"}, {"data": {"id": "ENSG0ENSG00000177606_ENSG0ENSG00000182979", "source": "ENSG0ENSG00000177606", "target": "ENSG0ENSG00000182979"}, "label": "-"}, {"data": {"id": "ENSG0ENSG00000177606_ENSG0ENSG00000050748", "source": "ENSG0ENSG00000177606", "target": "ENSG0ENSG00000050748"}, "label": "-"}, {"data": {"id": "ENSG0ENSG00000177606_ENSG0ENSG00000109339", "source": "ENSG0ENSG00000177606", "target": "ENSG0ENSG00000109339"}, "label": "-"}, {"data": {"id": "ENSG0ENSG00000177606_ENSG0ENSG00000170345", "source": "ENSG0ENSG00000177606", "target": "ENSG0ENSG00000170345"}, "label": "-"}, {"data": {"id": "ENSG0ENSG00000177606_ENSG0ENSG00000175592", "source": "ENSG0ENSG00000177606", "target": "ENSG0ENSG00000175592"}, "label": "-"}, {"data": {"id": "ENSG0ENSG00000177606_ENSG0ENSG00000085276", "source": "ENSG0ENSG00000177606", "target": "ENSG0ENSG00000085276"}, "label": "-"}, {"data": {"id": "ENSG0ENSG00000171223_ENSG0ENSG00000100721", "source": "ENSG0ENSG00000171223", "target": "ENSG0ENSG00000100721"}, "label": "-"}, {"data": {"id": "ENSG0ENSG00000171223_ENSG0ENSG00000075426", "source": "ENSG0ENSG00000171223", "target": "ENSG0ENSG00000075426"}, "label": "-"}, {"data": {"id": "ENSG0ENSG00000171223_ENSG0ENSG00000085276", "source": "ENSG0ENSG00000171223", "target": "ENSG0ENSG00000085276"}, "label": "-"}, {"data": {"id": "ENSG0ENSG00000130522_ENSG0ENSG00000175592", "source": "ENSG0ENSG00000130522", "target": "ENSG0ENSG00000175592"}, "label": "-"}, {"data": {"id": "ENSG0ENSG00000175592_ENSG0ENSG00000128272", "source": "ENSG0ENSG00000175592", "target": "ENSG0ENSG00000128272"}, "label": "-"}, {"data": {"id": "ENSG0ENSG00000128272_ENSG0ENSG00000162772", "source": "ENSG0ENSG00000128272", "target": "ENSG0ENSG00000162772"}, "label": "-"}];
      let max_score =
          Math.max(
            ...data.map(cur => {
              return cur["data"]["score"];
            }).filter(cur => !!cur)
          ) + 1;
        let max_module =
          Math.max(
            ...data.map(cur => {
                return !!cur["data"]["modules"] ? cur["data"]["modules"] : [];
              })
              .reduce((a, c) => a.concat(c), [])
          ) + 1;
      data = data.map(cur => {cur["label"] = !!cur["data"]["gene_symbol"] ? cur["data"]["gene_symbol"] : cur["data"]["eid"];
              cur["data"]["node_color"] = bwr(
                max_score,
                cur["data"]["score"],
                1,
                1
              );
              cur["data"]["line_color"] = rainbow(
                max_module,
                cur["data"]["modules"],
                0.75,
                0.75
              );
              return cur;})
      let cy1 = load_network(data)
      window.cy=cy1;
      generateTable()
      generateEnrichedModulesReport()
      generateDiseaseReport()
    };

  </script>




  <style>
    /* The Cytoscape Web container must have its dimensions set. */
    html,
    body {
      position: relative;
      height: 100% !important;
      width: 100% !important;
      padding: 0;
      margin: 0;
    }

    #cy1, #cy2 {
      width: 100% !important;
      height: 100% !important;
    }

    .image-wrapper {
      position: absolute;
      transform: translate(-50%, -50%);
      opacity: 1;
    }

    .image-wrapper.fade-out {
      opacity: 0;
      transition: opacity 1s ease-in-out;
    }
  </style>

</head>

<body>
  <noscript>
    You need to enable JavaScript to run this app.
  </noscript>
  <div class='container m-3' >
    <div class='row' style="width: 100vw">
      <div class='col-md-3'>
        <div class="row">
          <div id="root"></div>
        </div>
        <div class="row m-2">
          <table class="table">
                <thead>
                  <tr>
                    <th scope="col">id</th>
                    <th scope="col">name</th>
                    <th scope="col">modules</th>
                  </tr>
                </thead>
                <tbody div id="note"></tbody>
              </table>
	<button onclick="showActiveGenes()" class="btn btn-info"> show labels on genes</button>
        </div>
      </div>
      <div class='col-md-9'>
           <div id="cytoscapeweb" style="height: 70vh;width: 90vw">
        </div>
      </div>
    </div>
    <div class='row' style="height: 100vh;width: 100vw">
	<div class='col-md-12'>
		 <div><h3>Total number of genes: 15</h3></div>
                 <div id="disease_title"></div>
		 <div class='row'>
			<div class='col-md-3'>
                 		<div id="disease_content"></div>
                 	</div>
		 </div>
		 <div id="num_of_enriched_terms_title"></div>
		 <div class='row'>
			<div class='col-md-3'>
                 		<div id="num_of_enriched_terms"></div>
                 	</div>
		 </div>
		 <div id="hg_total_number"></div>
		 <div id="hg_report"></div>
	</div>
    </div>
  </div>

  <!--
      This HTML file is a template.
      If you open it directly in the browser, you will see an empty page.

      You can add webfonts, meta tags, or analytics to this file.
      The build step will place the bundled scripts into the <body> tag.

      To begin the development, run `npm start` or `yarn start`.
      To create a production bundle, use `npm run build` or `yarn build`.
    -->
</body>

</html>
